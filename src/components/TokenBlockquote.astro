---
import {
  ChatBubbleIcon,
  ExclamationTriangleIcon,
  InfoCircledIcon,
  RocketIcon,
} from "@radix-ui/react-icons";
import {
  Box,
  Code,
  Flex,
  type BlockquoteProps,
  type IconProps,
} from "@radix-ui/themes";
import { times } from "lodash-es";
import { type Tokens } from "marked";
import type { FunctionComponent } from "react";
import type { TokenRendererProps } from "./TokenRenderer.astro";
import TokensRenderer from "./TokensRenderer.astro";

type Props = TokenRendererProps<Tokens.Blockquote>;

const variantPattern = /\[!(\w+)]/;
const variantColors: Record<string, BlockquoteProps["color"]> = {
  CAUTION: "tomato",
  TIP: "blue",
  NOTE: "jade",
  IMPORTANT: "orange",
};
const variantNames: Record<string, string> = {
  CAUTION: "CAUTION",
  TIP: "TIP",
  NOTE: "NOTE",
  IMPORTANT: "IMPORTANT",
};
const variantIcons: Record<string, FunctionComponent<IconProps>> = {
  CAUTION: ExclamationTriangleIcon,
  TIP: InfoCircledIcon,
  NOTE: ChatBubbleIcon,
  IMPORTANT: RocketIcon,
};

let { token, context } = Astro.props;

const variant =
  token.tokens?.[0] &&
  token.tokens[0].type === "paragraph" &&
  token.tokens[0].text.match(variantPattern)?.[1];

let color: BlockquoteProps["color"] = "gray";
let name: string | undefined;
let Icon: FunctionComponent<IconProps> | undefined;

if (variant) {
  if (variant in variantColors) {
    color = variantColors[variant as keyof typeof variantColors];
    name = variantNames[variant as keyof typeof variantNames];
    Icon = variantIcons[variant as keyof typeof variantIcons];
  } else {
    throw new Error(`Unknown blockquote variant: ${variant}`);
  }
}

const fill = `var(--${color}-9)`;

const tildaWidth = 20;
const tildaHeight = 100;
const tildaSpace = tildaWidth / 2;
const tildaCount = 3;
---

<Flex direction="column" align="start" mb="4">
  {
    variant && Icon && (
      <Flex>
        <svg height="1.75rem" viewBox={`0 0 ${tildaWidth} ${tildaHeight}`}>
          <polygon
            {fill}
            points={
              `${tildaWidth} 0,` +
              `${2 * tildaWidth} 0,` +
              `${tildaWidth} ${tildaHeight},` +
              `${0} ${tildaHeight}`
            }
          />
        </svg>

        <Flex align="center" style={{ backgroundColor: fill }} px="1">
          <Code
            {color}
            variant="solid"
            style={{
              background: "none",
              display: "flex",
              alignItems: "center",
              gap: "var(--space-1)",
            }}
          >
            <Icon width="1em" height="1em" />
            {name}
          </Code>
        </Flex>

        <svg
          height="1.75rem"
          viewBox={`0 0 ${tildaCount * (tildaWidth + tildaSpace) - tildaSpace} ${tildaHeight}`}
        >
          {times(tildaCount, (i) => {
            return (
              <polygon
                points={
                  `${i * (tildaWidth + tildaSpace)} 0,` +
                  `${i * (tildaWidth + tildaSpace) + tildaWidth} 0,` +
                  `${i * (tildaWidth + tildaSpace)} ${tildaHeight},` +
                  `${i * (tildaWidth + tildaSpace) - tildaWidth} ${tildaHeight}`
                }
                {fill}
              />
            );
          })}
        </svg>
      </Flex>
    )
  }

  <Box
    p="2"
    style={{
      background: `linear-gradient(90deg, var(--${color}-a3), transparent)`,
    }}
  >
    <Flex direction="column">
      <TokensRenderer
        {context}
        tokens={variant ? token.tokens?.slice(1) : token.tokens}
      />
    </Flex>
  </Box>
</Flex>
