---
import {
  ChatBubbleIcon,
  ExclamationTriangleIcon,
  InfoCircledIcon,
} from "@radix-ui/react-icons";
import {
  Box,
  Code,
  Flex,
  Text,
  type BlockquoteProps,
  type IconProps,
} from "@radix-ui/themes";
import { times } from "lodash-es";
import { lexer, type Tokens } from "marked";
import type { FunctionComponent } from "react";
import type { TokenRendererProps } from "./TokenRenderer.astro";
import TokensRenderer from "./TokensRenderer.astro";

type Props = TokenRendererProps<Tokens.Blockquote>;

const variantPattern = /> \[!([A-Z]+)]\n>/;
const variantColors: Record<string, BlockquoteProps["color"]> = {
  CAUTION: "tomato",
  TIP: "blue",
  NOTE: "jade",
};
const variantNames: Record<string, string> = {
  CAUTION: "CAUTION",
  TIP: "TIP",
  NOTE: "NOTE",
};
const variantIcons: Record<string, FunctionComponent<IconProps>> = {
  CAUTION: ExclamationTriangleIcon,
  TIP: InfoCircledIcon,
  NOTE: ChatBubbleIcon,
};

let { token, context } = Astro.props;
const variantMatch = token.raw.match(variantPattern);
let color: BlockquoteProps["color"];
let name: string;
let Icon: FunctionComponent<IconProps>;

if (variantMatch) {
  const type = variantMatch[1];

  if (type in variantColors) {
    color = variantColors[type as keyof typeof variantColors];
    name = variantNames[type as keyof typeof variantNames];
    Icon = variantIcons[type as keyof typeof variantIcons];
    [token] = lexer(token.raw.slice(variantMatch[0].length));
  } else {
    throw new Error(`Unknown blockquote variant: ${type}`);
  }
} else {
  throw new Error("Missing blockquote variant");
}

const fill = `var(--${color}-9)`;

const tildaWidth = 20;
const tildaHeight = 100;
const tildaSpace = tildaWidth / 2;
const tildaCount = 3;
---

<Flex direction="column" align="start" mb="4">
  <Flex>
    <svg height="1.75rem" viewBox={`0 0 ${tildaWidth} ${tildaHeight}`}>
      <polygon
        {fill}
        points={`
          ${tildaWidth} 0,
          ${2 * tildaWidth} 0,
          ${tildaWidth} ${tildaHeight},
          ${0} ${tildaHeight},
        `}></polygon>
    </svg>

    <Flex align="center" style={{ backgroundColor: fill }} px="1">
      <Code
        {color}
        variant="solid"
        style={{
          background: "none",
          display: "flex",
          alignItems: "center",
          gap: "var(--space-1)",
        }}
      >
        <Icon width="1em" height="1em" />
        {name}
      </Code>
    </Flex>

    <svg
      height="1.75rem"
      viewBox={`0 0 ${tildaCount * (tildaWidth + tildaSpace) - tildaSpace} ${tildaHeight}`}
    >
      {
        times(tildaCount, (i) => {
          return (
            <polygon
              points={`
                ${i * (tildaWidth + tildaSpace)} 0,
                ${i * (tildaWidth + tildaSpace) + tildaWidth} 0,
                ${i * (tildaWidth + tildaSpace)} ${tildaHeight},
                ${i * (tildaWidth + tildaSpace) - tildaWidth} ${tildaHeight},
              `}
              {fill}
            />
          );
        })
      }
    </svg>
  </Flex>

  <Box
    p="2"
    style={{
      background: `linear-gradient(90deg, var(--${color}-a3), transparent)`,
    }}
  >
    <Text>
      <TokensRenderer {context} tokens={token.tokens} />
    </Text>
  </Box>
</Flex>
