---
import {
  Badge,
  Box,
  Flex,
  Heading,
  Link,
  Text,
  type HeadingProps,
} from "@radix-ui/themes";
import type { Tokens } from "marked";
import { sluggify } from "../core/sluggify";
import ConsistentSeparator from "./ConsistentSeparator.astro";
import { APPROXIMATE_navbarHeight } from "./Navbar.astro";
import type { TokenRendererProps } from "./TokenRenderer.astro";
import TokensRenderer from "./TokensRenderer.astro";

type Props = TokenRendererProps<Tokens.Heading>;

const { token, context } = Astro.props;
const isH1 = token.depth === 1;

const timeFormat: Intl.DateTimeFormatOptions = {
  year: "numeric",
  month: "short",
  day: "numeric",
};

const id = sluggify(token.text);
const href = `#${id}`;
---

<style>
  .heading {
    letter-spacing: var(--letter-spacing-9);
  }

  @media print {
    .anchor {
      display: none;
    }
  }

  .anchor {
    position: absolute;
    left: 0;
    top: 0;
    transform: translateX(-100%);
    width: var(--space-5);
    font-size: var(--font-size-3);
    opacity: 0.5;
    text-align: center;
  }

  .anchor:hover {
    opacity: 1;
  }
</style>

<Flex
  {id}
  direction="column"
  mt={isH1 ? undefined : "4"}
  mb={isH1 ? "6" : "4"}
  style={{
    scrollMarginTop: `calc(${APPROXIMATE_navbarHeight}px + var(--space-4))`,
  }}
>
  <Heading
    size={`${8 - token.depth}` as HeadingProps["size"]}
    mb="0.3em"
    className="heading"
    weight="medium"
  >
    <Box position="relative">
      <Link className="anchor" {href} color="gray">ยง</Link>
      <TokensRenderer {context} tokens={token.tokens} />
    </Box>
  </Heading>

  <ConsistentSeparator />

  {
    isH1 && (
      <Flex mt="3" align="center" justify="between">
        <Text size="2" color="gray">
          {context.created.toLocaleDateString(undefined, timeFormat)}
        </Text>

        {context.frontMatter.tags && (
          <Flex gap="2">
            {context.frontMatter.tags.map((tag) => (
              <Badge variant="surface">{tag}</Badge>
            ))}
          </Flex>
        )}
      </Flex>
    )
  }
</Flex>
