---
import { type Token, type Tokens } from "marked";
import TokenBlockquote from "./TokenBlockquote.astro";
import TokenCode from "./TokenCode.astro";
import TokenCodeSpan from "./TokenCodeSpan.astro";
import TokenDel from "./TokenDel.astro";
import TokenEm from "./TokenEm.astro";
import TokenHeading from "./TokenHeading.astro";
import TokenHtml from "./TokenHtml.astro";
import TokenImage from "./TokenImage.astro";
import TokenLatex from "./TokenLatex.astro";
import TokenLink from "./TokenLink.astro";
import TokenList from "./TokenList.astro";
import TokenListItem from "./TokenListItem.astro";
import TokenParagraph from "./TokenParagraph.astro";
import TokenParametricMacro from "./TokenParametricMacro.astro";
import TokenSpace from "./TokenSpace.astro";
import TokenStrong from "./TokenStrong.astro";
import TokenTable from "./TokenTable.astro";
import TokenText from "./TokenText.astro";

interface Props {
  token: Token;
}

export interface TokenRendererProps<Type> {
  token: Type | Tokens.Generic;
}

const { token } = Astro.props;
const Components = {
  space: TokenSpace,
  text: TokenText,
  html: TokenHtml,
  heading: TokenHeading,
  paragraph: TokenParagraph,
  em: TokenEm,
  strong: TokenStrong,
  del: TokenDel,
  link: TokenLink,
  image: TokenImage,
  code: TokenCode,
  blockquote: TokenBlockquote,
  codespan: TokenCodeSpan,
  table: TokenTable,
  list: TokenList,
  list_item: TokenListItem,
  latex: TokenLatex,
  parametricmacro: TokenParametricMacro,
};

let Component;

if (token.type in Components) {
  Component = Components[token.type as keyof typeof Components];
} else {
  throw new Error(`Unsupported token type: ${token.type}`);
}
---

{/* @ts-ignore typescript stack limit reach lmao */}
<Component {token} />
