---
import { type Token, type Tokens } from "marked";
import type { Context } from "../core/lexer";
import TokenBlockquote from "./TokenBlockquote.astro";
import TokenCode from "./TokenCode.astro";
import TokenCodeSpan from "./TokenCodeSpan.astro";
import TokenDel from "./TokenDel.astro";
import TokenEm from "./TokenEm.astro";
import TokenHeading from "./TokenHeading.astro";
import TokenHr from "./TokenHr.astro";
import TokenHtml from "./TokenHtml.astro";
import TokenImage from "./TokenImage.astro";
import TokenLatexBlock from "./TokenLatexBlock.astro";
import TokenLatexInline from "./TokenLatexInline.astro";
import TokenLink from "./TokenLink.astro";
import TokenList from "./TokenList.astro";
import TokenListItem from "./TokenListItem.astro";
import TokenParagraph from "./TokenParagraph.astro";
import TokenSpace from "./TokenSpace.astro";
import TokenStrong from "./TokenStrong.astro";
import TokenTable from "./TokenTable.astro";
import TokenText from "./TokenText.astro";

interface Props {
  token: Token;
  context: Context;
}

export interface FileContext {
  created: Date;
}

export interface TokenRendererProps<Type> {
  token: Type | Tokens.Generic;
  context: Context;
}

const { token, context } = Astro.props;
const Components = {
  space: TokenSpace,
  text: TokenText,
  escape: TokenText,
  html: TokenHtml,
  heading: TokenHeading,
  paragraph: TokenParagraph,
  em: TokenEm,
  strong: TokenStrong,
  del: TokenDel,
  link: TokenLink,
  image: TokenImage,
  code: TokenCode,
  blockquote: TokenBlockquote,
  codespan: TokenCodeSpan,
  table: TokenTable,
  list: TokenList,
  list_item: TokenListItem,
  latex_block: TokenLatexBlock,
  latex_inline: TokenLatexInline,
  hr: TokenHr,
};

let Component;

if (token.type in Components) {
  Component = Components[token.type as keyof typeof Components];
} else {
  console.error(token);
  throw new Error(`Unsupported token type: ${token.type}`);
}
---

{/* @ts-ignore typescript stack limit reach lol */}
<Component {token} {context} />
