---
import type { GetStaticPaths, GetStaticPathsResult } from "astro";
import Head from "../../components/Head.astro";
import type { FileContext } from "../../components/TokenRenderer.astro";
import TokensRenderer from "../../components/TokensRenderer.astro";
import { git } from "../../core/git";
import {
  globContents,
  type CustomLexerReturnType,
} from "../../core/globContents";
import { makeDate } from "../../core/makeDate";
import BaseLayout from "../../layouts/BaseLayout.astro";

export const getStaticPaths: GetStaticPaths = async () => {
  const content = await globContents();
  const pages: GetStaticPathsResult = [];

  for (const [path, lexer] of content) {
    pages.push({ params: { path }, props: { lexer } });
  }

  return pages;
};

interface Props {
  lexer: () => Promise<CustomLexerReturnType>;
}

const { path } = Astro.params;
const { lexer } = Astro.props;

const { tokens, frontMatter } = await lexer();

const file = `src/content/${path}.md`;
const created = await git
  .log({ file, n: 1, "--diff-filter": "A" })
  .then((log) => makeDate(log.latest?.date));

const fileContext: FileContext = { created };
---

<BaseLayout>
  <Head slot="head" {tokens} />
  <TokensRenderer {tokens} {frontMatter} {fileContext} />
</BaseLayout>
